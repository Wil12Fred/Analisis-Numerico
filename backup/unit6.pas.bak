unit Unit6;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, math, fpexprpars, Dialogs,
  matrizX, matrizfloat, sPila ,
  class_taylor, class_close, class_open, class_raphson, class_integral, class_edo, class_regresion, class_lag,
  interseccion;

type
  TParseMath = Class

  Private
      FParser: TFPExpressionParser;
      Procedure AddFunctions();


  Public
      exist: boolean;
      ResultParser: TFPExpressionResult;
      identifier: array of TFPExprIdentifierDef;
      Expression: string;
      function NewValue( Variable:string; Value: Double ): Double;
      procedure AddVariable( Variable: string; Value: Double );
      procedure AddString( Variable: string; Value: string );
      function Evaluate(  ): Double;
      constructor create();
      destructor destroy;
  end;

implementation

constructor TParseMath.create;
begin
   FParser:= TFPExpressionParser.Create( nil );
   FParser.Builtins := [ bcMath ];
   AddFunctions();
end;

destructor TParseMath.destroy;
begin
    FParser.Destroy;
end;

function TParseMath.NewValue( Variable: string; Value: Double ): Double;
begin
    FParser.IdentifierByName(Variable).AsFloat:= Value;
end;

function TParseMath.Evaluate(): Double;
begin
   try
     FParser.Expression:= Expression;
     ResultParser:= FParser.Evaluate;
     ResultParser.ResFloat:=ArgToFloat(ResultParser);
     evaluate:= ResultParser.ResFloat ;
     exist:=true;
   except
     evaluate:=NaN;
     exist:=false;
     exit;
   end;
end;

function IsNumber(AValue: TExprFloat): Boolean;
begin
  result := not (IsNaN(AValue) or IsInfinite(AValue) or IsInfinite(-AValue));
end;

procedure ExprFloor(var Result: TFPExpressionResult; Const Args: TExprParameterArray); // maximo entero
var
  x: Double;
begin
   x := ArgToFloat( Args[ 0 ] );
   if x > 0 then
     Result.ResFloat:= trunc( x )

   else
     Result.ResFloat:= trunc( x ) - 1;

end;

Procedure ExprTan( var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  x: Double;
begin
   x := ArgToFloat( Args[ 0 ] );
   if IsNumber(x) and ((frac(x - 0.5) / pi) <> 0.0) then
      Result.resFloat := tan(x)
   else
     Result.resFloat := NaN;
end;

{
Procedure ExprNewton( var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  x: Double;
  f: string;
  TheNewton: TNewton;
begin
   f:= Args[ 0 ].ResString;
   x:= ArgToFloat( Args[ 1 ] );

   TheNewton:= TNewton.Create;
   TheNewton.InitialPoint:= x;
   TheNewton.Expression:= f;
   Result.ResFloat := TheNewton.Execute;

   TheNewton.Destroy;

end;
}

Procedure ExprSin( var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  x: Double;
begin
   x := ArgToFloat( Args[ 0 ] );
   Result.resFloat := sin(x);

end;

Procedure ExprCos( var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  x: Double;
begin
   x := ArgToFloat( Args[ 0 ] );
   Result.resFloat := cos(x);
end;

Procedure ExprLn( var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  x: Double;
begin
    x := ArgToFloat( Args[ 0 ] );
   if IsNumber(x) and (x > 0) then
      Result.resFloat := ln(x)
   else
     Result.resFloat := NaN;
end;

Procedure ExprLog( var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  x: Double;
begin
    x := ArgToFloat( Args[ 0 ] );
   if IsNumber(x) and (x > 0) then
      Result.resFloat := ln(x) / ln(10)

   else
     Result.resFloat := NaN;

end;

Procedure ExprSQRT( var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  x: Double;
begin
    x := ArgToFloat( Args[ 0 ] );
   if IsNumber(x) and (x > 0) then
      Result.resFloat := sqrt(x)

   else
     Result.resFloat := NaN;

end;

Procedure ExprPower( var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  x,y: Double;
begin
    x := ArgToFloat( Args[ 0 ] );
    y := ArgToFloat( Args[ 1 ] );


     Result.resFloat := power(x,y);

end;

procedure ExprTaylorSin(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Taylor: TTaylor;
begin
   Taylor:=TTaylor.create;
   Taylor.TaylorType:=0;
   Taylor.x:= ArgToFloat(Args[0]);
   Taylor.Error:=ArgToFloat(Args[1]);
   Result.resFloat := Taylor.execute;
end;

procedure ExprTaylorCos(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Taylor: TTaylor;
begin
   Taylor:=TTaylor.create;
   Taylor.TaylorType:=1;
   Taylor.x:= ArgToFloat(Args[0]);
   Taylor.Error:=ArgToFloat(Args[1]);
   Result.resFloat := Taylor.execute;
end;

procedure ExprTaylorExp(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Taylor: TTaylor;
begin
   Taylor:=TTaylor.create;
   Taylor.TaylorType:=2;
   Taylor.x:= ArgToFloat(Args[0]);
   Taylor.Error:=ArgToFloat(Args[1]);
   Result.resFloat := Taylor.execute;
end;

procedure ExprTaylorSinD(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Taylor: TTaylor;
begin
   Taylor:=TTaylor.create;
   Taylor.TaylorType:=0;
   Taylor.x:= ArgToFloat(Args[0]);
   Result.resFloat := Taylor.execute;
end;

procedure ExprTaylorCosD(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Taylor: TTaylor;
begin
   Taylor:=TTaylor.create;
   Taylor.TaylorType:=1;
   Taylor.x:= ArgToFloat(Args[0]);
   Result.resFloat := Taylor.execute;
end;

procedure ExprTaylorExpD(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Taylor: TTaylor;
begin
   Taylor:=TTaylor.create;
   Taylor.TaylorType:=2;
   Taylor.x:= ArgToFloat(Args[0]);
   Result.resFloat := Taylor.execute;
end;

procedure biseccion(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Close: TClose;
begin
   Close:=TClose.create;
   Close.Parse.Expression:=Args[0].ResString;
   Close.Parse.AddVariable(Args[1].ResString,0);
   Close.xleft:=ArgToFloat(Args[2]);
   Close.xright:=ArgToFloat(Args[3]);
   Close.CloseType:=0;
   Result.resFloat := Close.execute;
end;

procedure falsaPosicion(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Close: TClose;
begin
   Close:=TClose.create;
   Close.Parse.Expression:=Args[0].ResString;
   Close.Parse.AddVariable(Args[1].ResString,0);
   Close.xleft:=ArgToFloat(Args[2]);
   Close.xright:=ArgToFloat(Args[3]);
   Close.CloseType:=1;
   Result.resFloat := Close.execute;
end;

procedure newton(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Open: TOpen;
begin
   Open:=TOpen.create;
   Open.Parse1.Expression:=Args[0].ResString;
   Open.Parse1.AddVariable(Args[2].ResString,0);
   Open.Parse2.Expression:=Args[1].ResString;
   Open.Parse2.AddVariable(Args[2].ResString,0);
   Open.x:=ArgToFloat(Args[2]);
   Open.OpenType:=0;
   Result.resFloat := Open.execute;
end;

procedure secante(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Open: TOpen;
begin
   Open:=TOpen.create;
   Open.Parse1.Expression:=Args[0].ResString;
   Open.Parse1.AddVariable(Args[1].ResString,0);
   Open.x:=ArgToFloat(Args[2]);
   Open.OpenType:=1;
   Result.resFloat := Open.execute;
end;

procedure raphson(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var vari,func,val: TSPila;
var NGen: TNGen;
begin
    vari:=TSPila.create(Args[1].ResString);
    NGen:=TNGen.Create;
    NGen.n:=vari.Count;
    func:=TSPila.create(Args[0].ResString);
    showmessage(Args[2].ResString);
    val:=TSPila.create(Args[2].ResString);

    NGen.Newton_Generalizado(vari,func,val);
    Result.ResString:=NGen.straux;
    //ShowMessage(Result.ResString);
    Result.ResFloat:=NaN;
end;

//summat('[{2}]','[{1}]')
procedure multMatrices(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  A,B,C: TMatriz;
begin
    A:=TMatriz.create(Args[0].ResString);
    B:=TMatriz.create(Args[1].ResString);
    C:=multiplicacionmat(A,B);
    Result.ResString:=C.contenido();
    Result.ResFloat:=NaN;
end;

//summat('[{2}]','[{1}]')
procedure sumMatrices(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  A,B,C: TMatriz;
begin
    A:=TMatriz.create(Args[0].ResString);
    B:=TMatriz.create(Args[1].ResString);
    C:=sumarmat(A,B);
    Result.ResString:=C.contenido();
    Result.ResFloat:=NaN;
end;

procedure resMatrices(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  A,B,C: TMatriz;
begin
    A:=TMatriz.create(Args[0].ResString);
    B:=TMatriz.create(Args[1].ResString);
    C:=restarmat(A,B);
    Result.ResString:=C.contenido();
    Result.ResFloat:=NaN;
end;

procedure transMat(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  A,C: TMatriz;
begin
    A:=TMatriz.create(Args[0].ResString);
    C:=A.getTranspuesta();
    Result.ResString:=C.contenido();
    Result.ResFloat:=0;
end;

procedure multrealmat(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  A,C: TMatriz;
  mult: real;
begin
    A:=TMatriz.create(Args[0].ResString);
    mult:= ArgToFloat(Args[1]);
    C:=multiplicacionmat(A,mult);
    Result.ResString:=C.contenido();
    Result.ResFloat:=NaN;
end;

procedure trapecio(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Integral: TIntegral;
begin
    Integral:=TIntegral.create();
    Integral.Parse.Expression:=(Args[0].ResString);
    Integral.Parse.AddVariable(Args[1].ResString,0);
    Integral.n:=10000;
    Result.ResFloat:=Integral.trapecio(ArgToFloat(Args[2]),ArgToFloat(Args[3]));
end;

procedure simpson1(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Integral: TIntegral;
begin
    Integral:=TIntegral.create();
    Integral.Parse.Expression:=(Args[0].ResString);
    Integral.Parse.AddVariable(Args[1].ResString,0);
    Integral.n:=10000;
    Result.ResFloat:=Integral.simpson1(ArgToFloat(Args[2]),ArgToFloat(Args[3]));
end;

procedure simpson3(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Integral: TIntegral;
begin
    Integral:=TIntegral.create();
    Integral.Parse.Expression:=(Args[0].ResString);
    Integral.Parse.AddVariable(Args[1].ResString,0);
    Integral.n:=10000;
    Result.ResFloat:=Integral.simpson3(ArgToFloat(Args[2]),ArgToFloat(Args[3]));
end;

//dormand('x*y','x','y',2,4,4.5)

procedure regLineal(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Reg: TRegresion;
begin
    Reg:=TRegresion.create();
    Reg.data:=TMatriz.create(Args[0].ResString);
    Result.ResString:=''''+Reg.lineal()+'''';
    Result.resfloat:=NaN;
end;

procedure regNoLineal(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Reg: TRegresion;
begin
    Reg:=TRegresion.create();
    Reg.data:=TMatriz.create(Args[0].ResString);
    Result.ResString:=''''+Reg.nolineal()+'''';
    Result.resfloat:=NaN;
end;


procedure euler(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Edo: TEdo;
begin
    Edo:=TEdo.create();
    Edo.Parse.Expression:=(Args[0].ResString);
    Edo.Parse.AddVariable(Args[1].ResString,0);
    Edo.Parse.AddVariable(Args[2].ResString,0);
    Edo.n:=1000;
    Result.ResFloat:=NaN;//
    Edo.euler(ArgToFloat(Args[5]),ArgToFloat(Args[3]),ArgToFloat(Args[4]));
    Result.ResString:=Edo.points.contenido();
end;

procedure heun(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Edo: TEdo;
begin
    Edo:=TEdo.create();
    Edo.Parse.Expression:=(Args[0].ResString);
    Edo.Parse.AddVariable(Args[1].ResString,0);
    Edo.Parse.AddVariable(Args[2].ResString,0);
    Edo.n:=1000;
    Result.ResFloat:=NaN;//
    Edo.heun(ArgToFloat(Args[5]),ArgToFloat(Args[3]),ArgToFloat(Args[4]));
    Result.ResString:=Edo.points.contenido();
   //Result.resfloat:=0;
end;

procedure runge4(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Edo: TEdo;
begin
    Edo:=TEdo.create();
    Edo.Parse.Expression:=(Args[0].ResString);
    Edo.Parse.AddVariable(Args[1].ResString,0);
    Edo.Parse.AddVariable(Args[2].ResString,0);
    Edo.n:=1000;
    Result.ResFloat:=NaN;//
    Edo.runge4(ArgToFloat(Args[5]),ArgToFloat(Args[3]),ArgToFloat(Args[4]));
    Result.ResString:=Edo.points.contenido();
   //Result.resfloat:=0;
end;

procedure dormand(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Edo: TEdo;
begin
    Edo:=TEdo.create();
    Edo.Parse.Expression:=(Args[0].ResString);
    Edo.Parse.AddVariable(Args[1].ResString,0);
    Edo.Parse.AddVariable(Args[2].ResString,0);
    Edo.n:=1000;
    Result.ResFloat:=NaN;//
    Edo.dormand(ArgToFloat(Args[5]),ArgToFloat(Args[3]),ArgToFloat(Args[4]));
    Result.ResString:=Edo.points.contenido();
   //Result.resfloat:=0;
end;

//raph('{power(x,2)-3;x+y}','{x;y}','{1;1}')

procedure interseccion(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var Inter: TInter;
  points: TMFloat;
begin
   Inter:=TInter.create;
   Inter.setFunctions(Args[0].ResString, Args[1].ResString);
   Inter.left:=ArgToFloat(Args[2]);
   Inter.right:=ArgToFloat(Args[3]);
   points:=Inter.getInterPoints(1,1);
   Result.ResFloat:=points.sub_list(points.fil-1).get_val(0);
   Result.ResString:=points.contenido();
end;

procedure plotfunc(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  Parse: TParseMath;
  points:TMFloat;
  left, right, ac: real;
begin
  Parse:=TParseMath.create();
  points:=TMFloat.create;
  left:=ArgToFloat(Args[2]);
  right:=ArgToFloat(Args[3]);
  Parse.Expression:=Args[0].ResString;
  Parse.AddVariable(Args[1].ResString,0);
  ac:=(right-left)/800;
  while (left<right) do begin
      Parse.NewValue(Args[1].ResString,left);
      points.push_list('{'+floattostr(left)+';'+floattostr(Parse.Evaluate())+'}');
      left:=left+ac;
  end;
  Result.ResString:=points.contenido();
end;

//plotfunc1('1/x','x',-10,10,200)

procedure lagrange(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var points: TMatriz;
var lag: TLag;
  var i: integer;
begin
  points:=TMatriz.create(Args[0].resString);
  i:=0;
  lag:= TLag.Create;
  while(i<points.cfil) do begin
      lag.insert(points.get_element(i,0),points.get_element(i,1));
      i:=i+1;
  end;
  Result.ResString:=''''+lag.getFunction+'''';
  Result.ResFloat:=NaN;
end;

procedure plotfunc1(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  Parse: TParseMath;
  points:TMFloat;
  left, right, ac: real;
begin
  Parse:=TParseMath.create();
  points:=TMFloat.create;
  left:=ArgToFloat(Args[2]);
  right:=ArgToFloat(Args[3]);
  Parse.Expression:=Args[0].ResString;
  Parse.AddVariable(Args[1].ResString,0);
  ac:=(right-left)/(ArgToFloat(Args[4]));
  while (left<right) do begin
      Parse.NewValue(Args[1].ResString,left);
      points.push_list('{'+floattostr(left)+';'+floattostr(Parse.Evaluate())+'}');
      left:=left+ac;
  end;
  Result.ResString:=points.contenido();
end;

procedure plotpoints(var Result: TFPExpressionResult; Const Args: TExprParameterArray);
var
  points:TMFloat;
begin
  try
    points:=TMFloat.create(Args[0].ResString);
    Result.ResString:=points.contenido();
  except
    points:=TMFloat.create ;
    Result.ResString:=points.contenido();
  end;
  Result.ResFloat:=NaN;
end;

Procedure TParseMath.AddFunctions();
begin
   with FParser.Identifiers do begin
       AddFunction('tan', 'F', 'F', @ExprTan);
       AddFunction('sin', 'F', 'F', @ExprSin);
       AddFunction('sen', 'F', 'F', @ExprSin);
       AddFunction('cos', 'F', 'F', @ExprCos);
       AddFunction('ln', 'F', 'F', @ExprLn);
       AddFunction('log', 'F', 'F', @ExprLog);
       AddFunction('sqrt', 'F', 'F', @ExprSQRT);
       AddFunction('power', 'F', 'FF', @ExprPower); //two arguments 'FF'
       //AddFunction('tsen', 'F', 'FF', @ExprTaylorSin);
       //AddFunction('tcos', 'F', 'FF', @ExprTaylorCos);
       //AddFunction('texp', 'F', 'FF', @ExprTaylorExp);

       AddFunction('tsen', 'F', 'F', @ExprTaylorSinD);
       AddFunction('tcos', 'F', 'F', @ExprTaylorCosD);
       AddFunction('texp', 'F', 'F', @ExprTaylorExpD);

       AddFunction('summat','S','SS',@sumMatrices);
       AddFunction('resmat','S', 'SS', @resMatrices);
       AddFunction('multmat','S','SS', @multMatrices);
       AddFunction('multRealmat','S','SF',@multRealMat);
       AddFunction('transMat', 'S', 'S', @transMat);

       AddFunction('bisec', 'F', 'SSFF', @biseccion);
       AddFunction('fpos', 'F', 'SSFF', @falsaPosicion);
       AddFunction('newt', 'F', 'SSSF', @newton);
       AddFunction('secan', 'F', 'SSF', @secante);
       AddFunction('inter', 'S', 'SSFF', @interseccion);
       AddFunction('raph','S','SSS', @raphson);

       AddFunction('trap', 'F','SSFF', @trapecio);
       AddFunction('sim1', 'F','SSFF', @simpson1);
       AddFunction('sim3', 'F','SSFF', @simpson3);

      AddFunction('euler', 'F','SSSFFF', @euler);
       AddFunction('heun', 'F','SSSFFF', @heun);
       AddFunction('runge4', 'F','SSSFFF', @runge4);
       AddFunction('dormand', 'F','SSSFFF', @dormand);

       AddFunction('lag','S','S', @lagrange);
       AddFunction('rlineal','S','S',@regLineal);
       AddFunction('rnolineal','S','S',@regNoLineal);

       AddFunction('func','S','SSFF',@plotfunc);
       AddFunction('func1','S','SSFFF',@plotfunc1);
       AddFunction('points', 'S', 'S', @plotpoints);
   end
end;

procedure TParseMath.AddVariable( Variable: string; Value: Double );
var Len: Integer;
begin
   Len:= length( identifier ) + 1;
   SetLength( identifier, Len ) ;
   if(Assigned(FParser.IdentifierByName(Variable))) then begin
     FParser.IdentifierByName(variable).FreeInstance;
   end;
   identifier[ Len - 1 ]:= FParser.Identifiers.AddFloatVariable( Variable, Value);

end;

procedure TParseMath.AddString( Variable: string; Value: string );
var Len: Integer;
begin
   Len:= length( identifier ) + 1;
   SetLength( identifier, Len ) ;
   if(Assigned(FParser.IdentifierByName(Variable))) then begin
     FParser.IdentifierByName(variable).FreeInstance;
   end;
   identifier[ Len - 1 ]:= FParser.Identifiers.AddStringVariable( Variable, Value);
end;

end.

